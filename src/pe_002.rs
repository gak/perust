/**
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 **/

type Counter = u64;

#[derive(Debug)]
struct Fib(Counter, Counter);

impl Fib {
    fn new() -> Self {
        Self { 0: 1, 1: 2 }
    }
}

impl Iterator for Fib {
    type Item = Counter;

    fn next(&mut self) -> Option<Self::Item> {
        let a = self.0;
        let b = self.1;
        let c = a + b;
        self.0 = b;
        self.1 = c;
        Some(a)
    }
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn first_items() {
        let mut fib = Fib::new();
        assert_eq!(fib.next(), Some(1));
        assert_eq!(fib.next(), Some(2));
        assert_eq!(fib.next(), Some(3));
        assert_eq!(fib.next(), Some(5));
    }

    #[test]
    fn first10() {
        let last = Fib::new().take(10).last().unwrap();
        assert_eq!(last, 89);
    }

    #[test]
    fn first4m() {
        let mut v = 0;
        let mut fib = Fib::new();
        let mut sum = 0;
        while v < 4_000_000 {
            v = fib.next().unwrap();
            if v % 2 == 0 {
                sum += v
            }
        }
        assert_eq!(sum, 4613732)
    }
}

